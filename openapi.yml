openapi: 3.0.0
info:
  title: Travel API
  version: 1.0.0

paths:
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Fetch user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found

  /api/users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTOWithoutID'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid input

  /api/travelEntries:
    get:
      tags:
        - Travel Entries
      summary: Get travel entries for a user
      parameters:
        - name: userId
          in: query
          required: true
          description: User ID to filter by
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TravelEntryDTO'

    post:
      tags:
        - Travel Entries
      summary: Create a new travel entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TravelEntryDTO'
      responses:
        '201':
          description: Travel entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TravelEntryDTO'
        '400':
          description: Invalid input

  /api/locations/search:
    post:
      tags:
        - Locations
      summary: Search locations within a bounding box
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoundingBoxDTO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDTO'
        '400':
          description: Invalid input

  /api/locations/{id}:
    get:
      tags:
        - Locations
      summary: Fetch location by ID
      parameters:
        - name: id
          in: path
          required: true
          description: Location ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDTO'
        '404':
          description: Location not found

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        travelEntries:
          type: array
          items:
            $ref: '#/components/schemas/TravelEntryDTO'

    UserDTOWithoutID:
      allOf:
        - $ref: '#/components/schemas/UserDTO'
      properties:
        id:
          type: integer
          format: int64
          readOnly: true

    TravelEntryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        entryDate:
          type: string
          format: date
        commentCount:
          type: integer
        likeCount:
          type: integer
        locations:
          type: array
          items:
            $ref: '#/components/schemas/LocationDTO'

    LocationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        locationName:
          type: string

    BoundingBoxDTO:
      type: object
      properties:
        northEast:
          $ref: '#/components/schemas/CoordinateDTO'
        southWest:
          $ref: '#/components/schemas/CoordinateDTO'

    CoordinateDTO:
      type: object
      properties:
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
